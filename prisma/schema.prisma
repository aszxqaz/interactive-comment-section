// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username String   @id
  image    String[]

  repliesMade     Reply[]   @relation("repliesMade")
  repliesReceived Reply[]   @relation("repliesReceived")
  comments        Comment[]

  commentsLikes UserCommentVote[]
  repliesLikes  UserReplyVote[]

  @@map("users")
}

model Reply {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  replyingToUser User   @relation(name: "repliesReceived", fields: [replyingTo], references: [username])
  replyingTo     String

  user     User   @relation(name: "repliesMade", fields: [username], references: [username], onDelete: Cascade)
  username String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  votes UserReplyVote[]

  @@map("replies")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  votes   UserCommentVote[]
  replies Reply[]

  @@map("comments")
}

model UserCommentVote {
  isUp Boolean

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String

  @@id([commentId, username])
  @@map("user_comment_votes")
}

model UserReplyVote {
  isUp Boolean

  user     User   @relation(fields: [username], references: [username], onDelete: Cascade)
  username String

  reply   Reply  @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId String

  @@id([replyId, username])
  @@map("user_reply_votes")
}
